@subheader """
from ossify.grammar import ScopeName, ScopeDefinition, combine_strings, breakp, merge_tokens
"""
start: definitions ENDMARKER { definitions }
definitions: (scope_definition [NEWLINE] { scope_definition })*
scope_definition:
    | scope_node_definition NEWLINE? '{' definitions '}'
    | scope_node_definition

scope_node_definition:
    | scope_name expr=('=' expr { expr})? NEWLINE? opts=scope_options? { ScopeDefinition(scope_name, expr, opts)}

scope_name: scope_name "." NAME { ScopeName(scope_name.parts + [name.string]) }
    | NAME { ScopeName([name.string]) }

scope_options:
    | scope_options [NEWLINE] scope_option { {**scope_options, **scope_option} }
    | scope_option { scope_option }
scope_option: "." NAME '=' expr { {name.string: expr}}

# A scope definition expression
expr:
    | type_call
    | multiline_string
    # Anything else is a string
    | tok=(NAME|NUMBER|OP)+ { merge_tokens(tok) }
    # token=(NAME | NUMBER | OP) { swallow_tokenizer_line(self, token, mark)}

# expr:
#     | STRING { string.string }
#     | NAME   { name.string }
#     | NUMBER { number.string }

multiline_string:
    | multiline_string NEWLINE? STRING {repr(multiline_string[1:-1] + "\n" + string.string[1:-1])}
    | STRING    {string.string}

type_call: NAME '(' function_params ')'
function_params: function_argument (',' function_argument)+
function_argument: [NAME '='] (STRING | NAME | NUMBER)

# include: 'include' ('scope' | 'file') (scope_name | STRING)

# definition: scope_name ['=' expr]



#name [= default_options]?
