@subheader """
from ossify.grammar import (Definition, ScopeName, Scope, combine_strings, breakp, cause_error, merge_bad_multiline_string, flatten_tokens, merge_tokens,
    Include)
"""

# NAME: Something that could be an identifier
# NUMBER: 0123456789
# STRING: Anything quoted
# OP: Everything else
# For tokenizing/speed whitespace is collapsed down - any sequence of
#   whitespace is converted to a single token. That token is a NEWLINE
#   if there are any newline tokens - otherwise it's an OP with " "

# Generic tools
# ws: spaces and newlines
# sep; spaces, newlines and ;'s

start: scope_contents ENDMARKER { Scope("<root>", None, scope_contents)}
scope_contents: contents=scope_entry+ { [x[0] for x in contents] }
scope_entry:
    | ws? scope { scope }
    | ws? scoped_definition { scoped_definition }
    | ws? include { include }

scope:
    | NAME opts=[sep scope_options] sep? '{' ws* cont=scope_contents? ws* '}' ws* { Scope(name.string, opts, cont or []) }
    | NAME "." scope { Scope(name.string, None, [scope]) }
    | tok='{' { cause_error("Not allowed to declare anonymous scope", tok)}

scope_name: scope_name "." NAME { ScopeName(scope_name.parts + [name.string]) }
    | NAME { ScopeName([name.string]) }

# Automatically extract nested definitions in-grammar
scoped_definition:
    | NAME ws? "=" ws? valueexpr so=[div scope_options { scope_options}] end_def { Definition(name.string, valueexpr, so) }
    | NAME "." scoped_definition { Scope(name.string, None, [scoped_definition]) }

# definition:
#     | scope_name ws? '=' ws? valueexpr so=[div scope_options { scope_options}] end_def { Definition(scope_name, valueexpr, so)}

# newline or scope end - lookahead only fails to return value so fake
end_def: div | &'}' { True }

scope_options:
    | scope_options div scope_option { {**scope_options, **scope_option} }
    | scope_option { scope_option }

# Technically the option keywords don't have to be full expressions? Until we
# are typing these, just use the generic behaviour for everything
scope_option: "." option_keyword ws?'=' ws? valueexpr { {option_keyword[0].string: merge_tokens(valueexpr)}}

include:
    | "include" " "+ "scope" " "+ scope_name sub=(" "+ scope_name)* div { Include("scope", str(scope_name) + str(sub)) }
    | "include" [ws "file"] ws valueexpr div   { Include("file", "<value>") }

# Values can be anything, non-string token separation means separate
# choices. Multiline strings can roll over a set of options after a
# newline, but the new line must start with a string ('a="3" "4"\n4 "3")
# or is not valid. Maybe: something that is not a name or a number?
valueexpr:
    | valueexpr " "* NEWLINE " "* STRING valueexpr? { [*valueexpr, string, *(opt or [])]}
    | valueexpr value { valueexpr + [value] }
    | value { value }
value:
    | STRING
    | NUMBER
    | NAME
    # Anything else that isn't a scope close, handle
    | !'{' !'}' !';' OP
    # Turns out we can - see test test_scope_inline_options
    # | tok='{' { cause_error('Cannot declare scope inline with value. Use quotes "{" to escape', tok)}

# Lexing rules
# Whitespace with newline - tokenizer collapses consecutive whitespace
ws: NEWLINE | " "
# sep means token separation - whitespace, or semicolon (one at most)
sep:
    | ws? ";" ws?
    | ws
# div means division of expressions - a newline or semicolon
div: " "* (NEWLINE | ';') ws?

# Parsing definition values - anything not '{};' can be in value
stringlike:
    | stringlike (NAME | !"}" !"{" !";" !" " OP | NUMBER | STRING)
    | STRING

option_keyword:
    | 'help'
    | 'caption'
    | 'short_caption'
    | 'optional'
    | 'multiple'
    | 'style'
    | 'expert_level'
    # These only happen on definitions
    | 'type'
    | 'input_size'
    | 'alias' # (observed)
    # These only happen on scopes
    | 'call'
    | 'sequential_format'
    | 'disable_add'
    | 'disable_delete'
    | NAME { cause_error(f"Unknown option parameter {name.string}", name) }

